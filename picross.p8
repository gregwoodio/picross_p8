pico-8 cartridge // http://www.pico-8.com
version 29
__lua__
--picross
--github.com/gregwoodio

function _init()
	--state
	state_menu=0
	state_playing=1
	state_won=2
	state_lost=3
	gamestate=state_menu
	difficulty=1
	
	--sprites
	spr_unclicked=1
	spr_filled=3
	spr_empty=4
	spr_filled_wrong=2
	spr_empty_wrong=5
	spr_pencil=16
	
	setup()	
	setup_board()

	music(3)
end

function setup()
	--board
	if difficulty == 1 then
		rows=5
		cols=5
	elseif difficulty == 2 then
		rows=5
		cols=10
	elseif difficulty == 3 then
		rows=10
		cols=10
	end
	board={}
	row_counts={}
	col_counts={}
	total_filled=0
	mistakes=0
	correct=0

	-- cursor coords relate to the grid
	cursor={
		x=1,
		y=1
	}

end

function setup_board()
	--set squares as chosen randomly
	for row=1, rows do
		add(board, {})
		for col=1, cols do
			is_filled=rnd()>0.5
			if (is_filled) total_filled += 1

			board[row][col]={
				selected=false,
				marked_empty=false,
				filled=is_filled
			}
		end
	end
	
	-- find row counts
	for row=1, rows do
		add(row_counts, {})
		local val = 0
		for col=1, cols do
			if (board[row][col].filled) val += 1
			
			-- if the next cell is unselected and the current one is, add the current count.
			-- Or, if this is the last cell and the count is greater than zero, add it.
			if col+1 < cols and val > 0 and board[row][col+1].filled == false or col+1 > cols and val > 0 then
				add(row_counts[row], val)
				val = 0
			end
		end
	end

	-- find col counts
	for col=1, cols do
		add(col_counts, {})
		local val = 0
		for row=1, rows do
			if (board[row][col].filled) val += 1
			
			if row+1 < rows and val > 0 and board[row+1][col].filled == false or row+1 > rows and val > 0 then
				add(col_counts[col], val)
				val = 0
			end
		end
	end
end

function _update()
	if gamestate == state_playing then
		if btnp(0) then -- left
			cursor.x -= 1
			if (cursor.x < 1) cursor.x = 1
		elseif btnp(1) then -- right
			cursor.x += 1
			if (cursor.x >= cols) cursor.x = cols
		elseif btnp(2) then -- up
			cursor.y -= 1
			if (cursor.y < 1) cursor.y = 1
		elseif btnp(3) then -- down
			cursor.y += 1
			if (cursor.y >= rows) cursor.y = rows
		elseif btnp(4) then --z
			if board[cursor.y][cursor.x].selected == false and board[cursor.y][cursor.x].marked_empty == false then
				board[cursor.y][cursor.x].marked_empty = true
				if board[cursor.y][cursor.x].filled then
					mistakes += 1
				end
			end
		elseif btnp(5) then --x
			if board[cursor.y][cursor.x].marked_empty == false and board[cursor.y][cursor.x].selected == false then
				board[cursor.y][cursor.x].selected = true
				if board[cursor.y][cursor.x].filled == true then
					correct += 1
				else 
					mistakes += 1
				end
			end
		end

		check_win()
	elseif gamestate == state_lost or gamestate == state_won then
		if btnp(5) then 
			gamestate = state_menu
		end
	elseif gamestate == state_menu then
		if btnp(2) then -- up
			difficulty -= 1
			if (difficulty < 1) difficulty = 1
		elseif btnp(3) then --down
			difficulty += 1
			if (difficulty > 3) difficulty = 3
		elseif btnp(5) then 
			gamestate = state_playing
			setup()
			setup_board()
		end
	end 
end
-->8
--drawing
function _draw()
	cls()
	
	--background
	rectfill(0, 0, 127, 127, 1)
	
	if gamestate == state_menu then
		map(0, 0, 28, 24, 9, 2)

		print("easy", 56, 64, 7)
		print("medium", 52, 72, 7)
		print("hard", 56, 80, 7)

		if difficulty == 1 then
			spr(spr_pencil, 76, 60)
		elseif difficulty == 2 then
			spr(spr_pencil, 80, 68)
		elseif difficulty == 3 then
			spr(spr_pencil, 76, 76)
		end
	else 
		--board
		for row=1, rows do
			for col=1, cols do
				spr(get_spr(row, col), (col-1)*8+40, (row-1)*8+40)
			end
		end

		--row clue numbers
		local row = 1 
		for rc in all(row_counts) do
			local col = 1
			local rc_len=len(rc)
			while rc_len > 0 do
				print(rc[rc_len],  42-col*8, 34-row*-8, 0)
				col += 1
				rc_len -= 1
			end
			row += 1
		end

		--column clue numbers
		col = 1
		for cc in all(col_counts) do
			row = 1
			cc_len=len(cc)
			while cc_len > 0 do
				print(cc[cc_len], 34+col*8, 40-row*8, 0)
				row += 1
				cc_len -= 1
			end
			col += 1
		end

		--draw cursor
		spr(spr_pencil, (cursor.x-1)*8+44, (cursor.y-1)*8+36)
		if gamestate == state_lost then
			rectfill(32, 4, 96, 32, 3)
			print("you win!", 48, 8, 7)
			print("mistakes: "..mistakes, 42, 16, 7)
			print("press ❎", 48, 24, 7)
		elseif gamestate == state_won then
			rectfill(44, 4, 80, 32, 3)
			print("you win!", 48, 8, 7)
			print("perfect!", 48, 16, 7)
			print("press ❎", 48, 24, 7)
		end
	end
end

function get_spr(y, x)
	if board[y][x].selected == false and board[y][x].marked_empty == false then
		return spr_unclicked
	elseif board[y][x].selected and board[y][x].filled then
		return spr_filled
	elseif board[y][x].selected and board[y][x].filled == false then
		return spr_empty_wrong
	elseif board[y][x].marked_empty and board[y][x].filled then
		return spr_filled_wrong
	elseif board[y][x].marked_empty and board[y][x].filled == false then
		return spr_empty
	end
end

function check_win()
	if correct + mistakes == total_filled then
		if mistakes > 0 then 
			gamestate = state_lost
		else 
			gamestate = state_won
		end
	end
end

--table helper functions
function len(t)
	local len = 0
	for v in all(t) do
		len+=1
	end
	return len
end
__gfx__
00000000777777756666666366666663111111101111111000000000000000000000000000000000000000000000000000000000000000000000000000000000
000000007666666568bbbb836bbbbbb3155555501855558000000000000000000000000000000000000000000000000000000000000000000000000000000000
00700700766666656b8bb8b36bbbbbb3155555501585585000000000000000000000000000000000000000000000000000000000000000000000000000000000
00077000766666656bb88bb36bbbbbb3155555501558855000000000000000000000000000000000000000000000000000000000000000000000000000000000
00077000766666656bb88bb36bbbbbb3155555501558855000000000000000000000000000000000000000000000000000000000000000000000000000000000
00700700766666656b8bb8b36bbbbbb3155555501585585000000000000000000000000000000000000000000000000000000000000000000000000000000000
000000007666666568bbbb836bbbbbb3155555501855558000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000755555556333333363333333100000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000a00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
0000aaa0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
000aaaaa000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00aaaaa0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
0aaaaa00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
04aaa000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
444a0000005555555550555550555555555055555555505555555550555555555505555555555000000000000000000000000000000000000000000000000000
14000000005777777750577750577777775057777777505777777750577777777505777777775000000000000000000000000000000000000000000000000000
00000000005777577750577750577755555057775777505777577750577775555505777755555000000000000000000000000000000000000000000000000000
00000000005777777750577750577755500057777777505777577750577777777505777777775000000000000000000000000000000000000000000000000000
00000000005777555550577750577755500057777775505777577750555577777505555777775000000000000000000000000000000000000000000000000000
00000000005777555550577750577755555057775777505777777750577777777505777777775000000000000000000000000000000000000000000000000000
00000000005777500000577750577777775057775777505777777750577777777505777777775000000000000000000000000000000000000000000000000000
00000000005555500000555550555555555055555555505555555550555555555505555555555000000000000000000000000000000000000000000000000000
00000000005555500000555550555555555055550555505555555550555555555505555555555000000000000000000000000000000000000000000000000000
__map__
1112131415161718190000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
2122232425262728290000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
__sfx__
000a0000045700c500042000000004500045000455000000105701600000000000000457000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
000a0000075700e500000000000000000000000755006500135701550000000000000757007500000000000000000000002400014100273000000018400095000000000000000000000000000000000000000000
000a00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
000a000004120137000000000000001002e00004120000001c6100000004100000000411004100000001d60004120000000410000000006001c6001c600196001c6101d600041000010000000000000000000000
000a00001053010530105301053010530105301052010510105001050010500105001c5301c5301c5301c5301c5301c5301c5301c5301c5201c5201c5201c5201c5201c5201c5201c5201c5101c5101c5101c510
000a00000753007530075300753007530075300752007510000000000000000000001353013530135301353013530135301353013530135201352013520135201352013520135201352013510135101351013510
000a00001c5101c5101c5101c5101c5101c5101c5101c5101c5101c5101c5101c5101c5101c5101c5101c5101c5101c5101c5101c5101c5101c5101c5101c5101c5101c5101c5101c5101c5101c5101c5101c510
000a00001351013510135101351013510135101351013510135101351013510135101351013510135101351013510135101351013510135101351013510135101351013510135101351013510135101351013510
000a00001c550195001a5501750017500175001750000000175501550015550145000e5000e5001050010500105001050010500105000e5500850000500105001055010550105401054010530105301052010510
000a00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000106100000000000000000000000000000000000000000000000000000000
001000000000000000000000000000000000000000000000000000000000000000000460000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
__music__
00 04434042
00 06434344
00 05434144
00 47084844
01 03040044
00 03064344
00 03050144
00 03070944
00 03040044
00 03064344
00 03050144
02 03070844

